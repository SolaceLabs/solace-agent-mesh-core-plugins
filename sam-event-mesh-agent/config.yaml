# Plugin Metadata:
# Name: sam-event-mesh-agent
# Version: 0.1.0
# Description: This agent sends a message into event mesh and subscribes for a response
# Author: SolaceLabs <solacelabs@solace.com>
# 
# --- Start of Agent Configuration Template ---
# Solace Agent Mesh: Plugin Configuration Template
#
# This file serves as a template for creating new agent configurations from this plugin.
# Use placeholders like __COMPONENT_KEBAB_CASE_NAME__, __COMPONENT_PASCAL_CASE_NAME__,
# and __COMPONENT_UPPER_SNAKE_CASE_NAME__ where the specific component name should be inserted.

log:
  stdout_log_level: INFO
  log_file_level: DEBUG
  log_file: __COMPONENT_KEBAB_CASE_NAME__.log

# To use the `shared_config.yaml` file, uncomment the following line and remove the `shared_config` section below.
# !include ../shared_config.yaml
shared_config:
  - broker_connection: &broker_connection
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL, ws://localhost:8080}
      broker_username: ${SOLACE_BROKER_USERNAME, default}
      broker_password: ${SOLACE_BROKER_PASSWORD, default}
      broker_vpn: ${SOLACE_BROKER_VPN, default}
      temporary_queue: ${USE_TEMPORARY_QUEUES, true}

  - models:
    general: &general_model
      # This dictionary structure tells ADK to use the LiteLlm wrapper.
      # 'model' uses the specific model identifier your endpoint expects.
      model: ${LLM_SERVICE_GENERAL_MODEL_NAME} # Use env var for model name
      # 'api_base' tells LiteLLM where to send the request.
      api_base: ${LLM_SERVICE_ENDPOINT} # Use env var for endpoint URL
      # 'api_key' provides authentication.
      api_key: ${LLM_SERVICE_API_KEY} # Use env var for API key

  - services:
    # Default session service configuration
    session_service: &default_session_service
      type: "memory"
      default_behavior: "PERSISTENT"
    
    # Default artifact service configuration
    artifact_service: &default_artifact_service
      type: "filesystem"
      base_path: "/tmp/samv2"
      artifact_scope: namespace # Or "namespace", "app", "custom"

apps:
  - name: __COMPONENT_KEBAB_CASE_NAME__-app
    app_base_path: . 
    app_module: solace_agent_mesh.agent.sac.app 
    broker:
      <<: *broker_connection

    broker_request_response:
      enabled: true # Must be true for this agent to function
      broker_config: *broker_connection
      request_expiry_ms: 120000
      payload_encoding: utf-8
      payload_format: json
      response_topic_prefix: ${NAMESPACE}solace-agent-mesh/v1
      response_queue_prefix: ${NAMESPACE}solace-agent-mesh/v1

    # App Level Config
    app_config:
      namespace: ${NAMESPACE} 
      supports_streaming: true 
      agent_name: "__COMPONENT_PASCAL_CASE_NAME__" 
      display_name: "__COMPONENT_SPACED_CAPITALIZED_NAME__ Agent"
      model: *general_model 

      ##############################
      # 1. UPDATE REQUIRED - START #
      ##############################
      instruction: |
        You're __COMPONENT_SPACED_CAPITALIZED_NAME__ Agent. You can use your tools to
        send messages into the event mesh and subscribe for responses.

        Provide all the required params for the tool.
      ############################
      # 1. UPDATE REQUIRED - END #
      ############################

      tools:
        - group_name: artifact_management
          tool_type: builtin-group

        # You can duplicate this entry with different tool_name, description, and parameters 
        # for different use cases.
        - tool_type: python
          component_module: sam_event_mesh_agent.tools
          function_name: broker_request_response

          ##############################
          # 2. UPDATE REQUIRED - START #
          ##############################
          tool_name: "YourPythonTool" # rename this tool appropriately
          description: | # Update this description to match your tool's functionality
            A Python tool that does something useful using the event mesh.

            This tool requires the following parameters in params:
            - foo [string|required]: The description of the foo parameter
            - bar [bool|optional]: The description of the bar parameter  
          tool_config:
            parameters:
              - name: foo
                default: "default_value"
                payload_path: path.to.foo # Adds to Payload - Supports dot notation for nested paths
              - name: bar
                default: True
                payload_path: bar # Adds to Payload
              - name: baz # Used only in topic template
                default: "baz_value" 
            topic: ${NAMESPACE}some/{{text://baz}}/topic
            response_timeout: 20
            response_format: text
          ############################
          # 2. UPDATE REQUIRED - END #
          ############################

      session_service: 
        type: "sql"
        database_url: "${__COMPONENT_UPPER_SNAKE_CASE_NAME__, sqlite:///__COMPONENT_SNAKE_CASE_NAME__.db}"
        default_behavior: "PERSISTENT"
      artifact_service: *default_artifact_service

      artifact_handling_mode: "embed"
      enable_embed_resolution: true
      enable_artifact_content_instruction: true

      ##############################
      # 3. UPDATE REQUIRED - START #
      ##############################
      agent_card:
        description: "This agent sends a message into event mesh and subscribes for a response"
        defaultInputModes: ["text"]
        defaultOutputModes: ["text"]
        skills: 
        # Add one per python tool you define
          # - id: "example_tool"
          #   name: "Example Tool"
          #   description: "An example tool provided by the SamEventMeshAgent plugin."
      agent_card_publishing: { interval_seconds: 10 }
      agent_discovery: { enabled: false }
      inter_agent_communication:
        allow_list: []
        request_timeout_seconds: 30
      ############################
      # 3. UPDATE REQUIRED - END #
      ############################
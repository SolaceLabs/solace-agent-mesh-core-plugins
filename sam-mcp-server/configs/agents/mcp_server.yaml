# This is the configuration file for the mcp server agent
#
# It fulfills a few functions:
# Configuration file for the MCP server agent.
#
# It fulfills a few functions:
# 1. A flow to do periodic registration of this agent with the orchestrator (if enabled)
# 2. A flow to process action requests and produce action responses
#    This requires a custom component (mcp_server_agent_component) to interact with the MCP server.
#
# When creating a new agent instance using `solace-agent-mesh add agent <new_agent_name> --copy-from sam_mcp_server:mcp_server`,
# the placeholders {{SNAKE_CASE_NAME}} and {{SNAKE_UPPER_CASE_NAME}} will be replaced with the new agent name.
#
# Requires the following environment variables:
# - SOLACE_BROKER_URL
# - SOLACE_BROKER_USERNAME
# - SOLACE_BROKER_PASSWORD
# - SOLACE_BROKER_VPN
# - SOLACE_AGENT_MESH_NAMESPACE
# - {{SNAKE_UPPER_CASE_NAME}}_SERVER_COMMAND - The command to start the MCP server process.
# - {{SNAKE_UPPER_CASE_NAME}}_SERVER_DESCRIPTION (Optional) - Description of the server, defaults to "Provides access to the {{SNAKE_CASE_NAME}} MCP server".

---
log:
  stdout_log_level: INFO
  log_file_level: INFO
  log_file: solace_ai_connector.log

shared_config:
  - broker_config: &broker_connection
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}

  - mcp_server_info: &mcp_server_info
      server_name: &mcp_server_name {{SNAKE_CASE_NAME}}
      server_description: &mcp_server_description ${{{SNAKE_UPPER_CASE_NAME}}_SERVER_DESCRIPTION, "Provides access to the {{SNAKE_CASE_NAME}} MCP server"}
      server_command: &mcp_server_command ${{{SNAKE_UPPER_CASE_NAME}}_SERVER_COMMAND}
      server_subscription_topic: &mcp_sub_topic ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/actionRequest/*/*/{{SNAKE_CASE_NAME}}/>

flows:
  # Flow to handle action requests
  - name: {{SNAKE_CASE_NAME}}_action_request_processor
    components:
      # Input from a Solace broker
      - component_name: broker_input
        component_module: broker_input
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}agent_{{SNAKE_CASE_NAME}}_action_request
          broker_subscriptions:
            # Subscribe to all actions for this specific agent instance.
            # Note: If you wanted to handle some actions elsewhere, you would
            # need to be more specific here
            - topic: *mcp_sub_topic
              qos: 1

      # Custom component to process the action request
      - component_name: action_request_processor
         # path is completed at build time
        component_module: {{MODULE_DIRECTORY}}.agents.mcp_server.mcp_server_agent_component
        component_config:
          <<: *mcp_server_info # Include server name, description, command from anchor
          llm_service_topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/llm-service/request/general-good/
          embedding_service_topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/embedding-service/request/text/
          mode: stdio # Currently only stdio is supported by the async handler
          enable_sampling: false # Set to true to allow the MCP server to make LLM requests back through SAM

          # Optional timeouts and retry settings can be added here if needed
          # timeout: 90
          # server_startup_timeout: 30
        broker_request_response:
          enabled: true
          broker_config: *broker_connection
          request_expiry_ms: 120000
          payload_encoding: utf-8
          payload_format: json
          response_topic_prefix: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1
          response_queue_prefix: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1
        component_input:
          source_expression: input.payload

      # Output to a Solace broker
      - component_name: broker_output
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true

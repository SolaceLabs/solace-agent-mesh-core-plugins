# Plugin Metadata:
# Name: sam-bedrock-agent
# Version: 0.1.0
# Description: This plugin allows you to import one or multiple Amazon bedrock agents or flows as action to be used in your SAM project.
# Author: SolaceLabs <solacelabs@solace.com>

log:
  stdout_log_level: INFO
  log_file_level: DEBUG
  log_file: __COMPONENT_KEBAB_CASE_NAME__.log

# To use the `shared_config.yaml` file, uncomment the following line and remove the `shared_config` section below.
# !include ../shared_config.yaml

shared_config:
  - broker_connection: &broker_connection
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL, ws://localhost:8080}
      broker_username: ${SOLACE_BROKER_USERNAME, default}
      broker_password: ${SOLACE_BROKER_PASSWORD, default}
      broker_vpn: ${SOLACE_BROKER_VPN, default}
      temporary_queue: ${USE_TEMPORARY_QUEUES, true}

  - models:
    general: &general_model
      # This dictionary structure tells ADK to use the LiteLlm wrapper.
      # 'model' uses the specific model identifier your endpoint expects.
      model: ${LLM_SERVICE_GENERAL_MODEL_NAME} # Use env var for model name
      # 'api_base' tells LiteLLM where to send the request.
      api_base: ${LLM_SERVICE_ENDPOINT} # Use env var for endpoint URL
      # 'api_key' provides authentication.
      api_key: ${LLM_SERVICE_API_KEY} # Use env var for API key

  - services:
    # Default session service configuration
    session_service: &default_session_service
      type: "memory"
      default_behavior: "PERSISTENT"
    
    # Default artifact service configuration
    artifact_service: &default_artifact_service
      type: "filesystem"
      base_path: "/tmp/samv2"
      artifact_scope: namespace

apps:
  - name: __COMPONENT_KEBAB_CASE_NAME__-app
    app_base_path: . 
    app_module: solace_agent_mesh.agent.sac.app 
    broker:
      <<: *broker_connection

    # App Level Config
    app_config:
      namespace: ${NAMESPACE} 
      supports_streaming: true 
      agent_name: "__COMPONENT_PASCAL_CASE_NAME__" 
      display_name: "__COMPONENT_PASCAL_CASE_NAME__ Component" 
      model: *general_model 

      ##############################
      # 1. UPDATE REQUIRED - START #
      ##############################
      instruction: |
        You're __COMPONENT_PASCAL_CASE_NAME__ agent responsible to handle user queries by 
        interacting with Amazon Bedrock agents or flows.

      # Amazon Bedrock agent configuration
      amazon_bedrock_runtime_config: &amazon_bedrock_runtime_config
        # AWS Endpoint URL - Optional
        endpoint_url:
        # AWS S3 configuration - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
        # The following object is passed as kwargs to boto3.session.Session
        boto3_config:
          # AWS region name
          region_name: "us-east-1"
          # AWS credentials
          aws_access_key_id: # You can also use profiles instead, check boto3 documentation
          aws_secret_access_key:

      tools:
        - group_name: artifact_management
          tool_type: builtin-group

        # --- ADD ONE PER AMAZON BEDROCK AGENT ---
        - tool_type: python
          component_module: sam_bedrock_agent.bedrock_agent
          component_base_path: . 
          function_name: invoke_bedrock_agent
          tool_name: "My Bedrock Agent" # Customizable, Name exposed to the LLM
          tool_description: "Performs tasks using the My Bedrock Agent." # Customizable, Optional description
          tool_config:
            amazon_bedrock_runtime_config: *amazon_bedrock_runtime_config
            bedrock_agent_id: "FAKE_AGENT_ID" # The ID of the Amazon bedrock agent
            bedrock_agent_alias_id: "FAKE_AGENT_ALIAS_ID" # The alias ID of the Amazon bedrock agent
            allow_files: false # Whether to allow uploading file to the agent. Limit: 5 files (10MB total size)
                                # - Supported formats: .pdf, .txt, .doc, .csv, .xls, .xlsx

        # --- ADD ONE PER AMAZON BEDROCK FLOW ---
        - tool_type: python
          component_module: sam_bedrock_agent.bedrock_flow
          component_base_path: .
          function_name: invoke_bedrock_flow
          tool_name: "My Bedrock Flow" # Name exposed to the LLM
          tool_description: "Performs tasks using the My Bedrock Flow." # Optional description
          tool_config: 
            amazon_bedrock_runtime_config: *amazon_bedrock_runtime_config
            bedrock_flow_id: "FAKE_FLOW_ID" # The ID of the Amazon bedrock flow
            bedrock_flow_alias_id: "FAKE_FLOW_ALIAS_ID" # The alias ID of the Amazon bedrock flow

      ############################
      # 1. UPDATE REQUIRED - END #
      ############################


      session_service: *default_session_service
      artifact_service: *default_artifact_service

      artifact_handling_mode: "embed"
      enable_embed_resolution: true
      enable_artifact_content_instruction: true

      ##############################
      # 2. UPDATE REQUIRED - START #
      ##############################
      agent_card:
        # Alternatively, the description can be updated to only include the capabilities of the flows and agents. The agent's internal LLM will
        # automatically select the appropriate agent or flow based on the user query.
        description: "This plugin allows you to import one or multiple Amazon bedrock agents or flows as action to be used in your SAM project."
        defaultInputModes: ["text"]
        defaultOutputModes: ["text"]
        skills: 
        # Per every tool added in the `app_config.tools` section, add a skill here.
        - id: "my_bedrock_agent"
          name: "My Bedrock Agent"
          description: "Performs tasks using the My Bedrock Agent."

        - id: "my_bedrock_flow"
          name: "My Bedrock Flow"
          description: "Performs tasks using the My Bedrock Flow."

      ############################
      # 2. UPDATE REQUIRED - END #
      ############################


      agent_card_publishing: { interval_seconds: 10 }
      agent_discovery: { enabled: false }
      inter_agent_communication:
        allow_list: []
        request_timeout_seconds: 30
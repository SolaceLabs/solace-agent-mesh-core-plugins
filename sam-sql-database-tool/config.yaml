# Plugin Metadata:
# Name: sam-sql-database-tool
# Version: 0.1.0
# Description: A plugin that provides a reusable SQL database tool.

log:
  stdout_log_level: INFO
  log_file_level: DEBUG
  log_file: __COMPONENT_KEBAB_CASE_NAME__.log


# To use the `shared_config.yaml` file, uncomment the following line and remove the `shared_config` section below.
# !include ../shared_config.yaml
shared_config:
  - broker_connection: &broker_connection
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL, ws://localhost:8080}
      broker_username: ${SOLACE_BROKER_USERNAME, default}
      broker_password: ${SOLACE_BROKER_PASSWORD, default}
      broker_vpn: ${SOLACE_BROKER_VPN, default}
      temporary_queue: ${USE_TEMPORARY_QUEUES, true}

  - models:
    general: &general_model
      # This dictionary structure tells ADK to use the LiteLlm wrapper.
      # 'model' uses the specific model identifier your endpoint expects.
      model: ${LLM_SERVICE_GENERAL_MODEL_NAME} # Use env var for model name
      # 'api_base' tells LiteLLM where to send the request.
      api_base: ${LLM_SERVICE_ENDPOINT} # Use env var for endpoint URL
      # 'api_key' provides authentication.
      api_key: ${LLM_SERVICE_API_KEY} # Use env var for API key

  - services:
    # Default session service configuration
    session_service: &default_session_service
      type: "memory"
      default_behavior: "PERSISTENT"
    
    # Default artifact service configuration
    artifact_service: &default_artifact_service
      type: "filesystem"
      base_path: "/tmp/samv2"
      artifact_scope: namespace # Or "namespace", "app", "custom"

apps:
  - name: __COMPONENT_KEBAB_CASE_NAME__-app
    app_module: solace_agent_mesh.agent.sac.app 
    broker:
      <<: *broker_connection
    app_config:
      namespace: "${NAMESPACE}" # Your A2A topic namespace
      agent_name: "__COMPONENT_PASCAL_CASE_NAME__" 
      display_name: "__COMPONENT_PASCAL_CASE_NAME__ Component" 
      supports_streaming: true

      model: *general_model 
      instruction: |
        You are an expert SQL assistant.
        Your primary goal is to translate user questions into accurate SQL queries.
        If a user asks to query a database, generate the SQL and call the appropriate query tool.

      tools:
        - group_name: artifact_management
          tool_type: builtin-group

        - tool_type: python
          component_module: "sam_sql_database_tool.tools"
          component_base_path: .
          class_name: "SqlDatabaseTool"
          tool_config:
            tool_name: "first_db"
            tool_description: "A SQL database tool connected to a specific database."
            connection_string: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___DB1_CONNECTION_STRING}"

        - tool_type: python
          component_module: "sam_sql_database_tool.tools"
          component_base_path: .
          class_name: "SqlDatabaseTool"
          tool_config:
            tool_name: "second_db"
            tool_description: "A SQL database tool connected to another specific database."
            connection_string: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___DB2_CONNECTION_STRING}"
            auto_detect_schema: false # Disable auto schema detection
            # Provide manual schema information and summary
            database_schema_override: >
              "### Schema Information:\n\n"
              "**Table: table_1**\n"
              "- id (integer, primary key)\n"
              "- name (text)\n"
              "- created_at (timestamp)\n\n"
              
              "**Table: table_2**\n"
              "- id (integer, primary key)\n"
              "- description (text)\n"
              "- value (float)\n\n"
            schema_summary_override: >
              "This database contains two tables: table_1 and table_2. "
              "table_1 stores basic information with fields for id, name, and creation timestamp. "
              "table_2 holds descriptive data with fields for id, description, and a numeric value."

      session_service: *default_session_service
      artifact_service: *default_artifact_service

      # Agent Card, Discovery, and Inter-Agent Communication
      agent_card:
        description: "An agent that can answer questions by querying configured databases."
        defaultInputModes: ["text"]
        defaultOutputModes: ["text", "file"]
        skills:
          - id: "sql_query_first_db"
            name: "Database Query (First DB)"
            description: "Answers questions by querying the first configured SQL database."
          - id: "sql_query_second_db"
            name: "Database Query (Second DB)"
            description: "Answers questions by querying the second configured SQL database."

      agent_card_publishing:
        interval_seconds: 30

      agent_discovery:
        enabled: false

      inter_agent_communication:
        allow_list: []

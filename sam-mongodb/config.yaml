# Plugin Metadata:
# Name: sam-mongodb
# Version: 0.1.0
# Description: A plugin that provides a MongoDB agent to perform complex queries based on natural language.
# Author: SolaceLabs <solacelabs@solace.com>

log:
  stdout_log_level: INFO
  log_file_level: DEBUG
  log_file: __COMPONENT_KEBAB_CASE_NAME__.log

# To use the `shared_config.yaml` file, uncomment the following line and remove the `shared_config` section below.
# !include ../shared_config.yaml
shared_config:
  - broker_connection: &broker_connection
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL, ws://localhost:8080}
      broker_username: ${SOLACE_BROKER_USERNAME, default}
      broker_password: ${SOLACE_BROKER_PASSWORD, default}
      broker_vpn: ${SOLACE_BROKER_VPN, default}
      temporary_queue: ${USE_TEMPORARY_QUEUES, true}

  - models:
    general: &general_model
      # This dictionary structure tells ADK to use the LiteLlm wrapper.
      # 'model' uses the specific model identifier your endpoint expects.
      model: ${LLM_SERVICE_GENERAL_MODEL_NAME} # Use env var for model name
      # 'api_base' tells LiteLLM where to send the request.
      api_base: ${LLM_SERVICE_ENDPOINT} # Use env var for endpoint URL
      # 'api_key' provides authentication.
      api_key: ${LLM_SERVICE_API_KEY} # Use env var for API key

  - services:
    # Default session service configuration
    session_service: &default_session_service
      type: "memory"
      default_behavior: "PERSISTENT"
    
    # Default artifact service configuration
    artifact_service: &default_artifact_service
      type: "filesystem"
      base_path: "/tmp/samv2"
      artifact_scope: namespace # Or "namespace", "app", "custom"

apps:
  - name: __COMPONENT_KEBAB_CASE_NAME__-app
    app_module: solace_agent_mesh.agent.sac.app
    broker:
      <<: *broker_connection
    app_config:
      namespace: "${NAMESPACE}"
      agent_name: "__COMPONENT_PASCAL_CASE_NAME__"
      display_name: "__COMPONENT_PASCAL_CASE_NAME__"
      supports_streaming: false

      model: *general_model
      instruction: |
        You are an expert MongoDB assistant.
        Your primary goal is to translate user questions into accurate MongoDB aggregation pipelines.
        When asked to query the database, generate the pipeline and call the query tool.
        If the tool returns an error, analyze the error message and the original pipeline,
        then try to correct the pipeline and call the tool again.

      agent_init_function:
        module: "sam_mongodb.lifecycle"
        name: "initialize_mongo_agent"
        config:
          db_host: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___MONGO_HOST}"
          db_port: ${__COMPONENT_UPPER_SNAKE_CASE_NAME___MONGO_PORT}
          db_user: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___MONGO_USER}"
          db_password: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___MONGO_PASSWORD}"
          db_name: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___MONGO_DB}"
          database_collection: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___MONGO_COLLECTION}"
          database_purpose: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___DB_PURPOSE}"
          data_description: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___DB_DESCRIPTION}"
          auto_detect_schema: ${AUTO_DETECT_SCHEMA, true}
          max_inline_results: ${MAX_INLINE_RESULTS, 10}

      agent_cleanup_function:
        module: "sam_mongodb.lifecycle"
        name: "cleanup_mongo_agent_resources"

      tools:
        - tool_type: builtin-group
          group_name: "artifact_management"
        - tool_type: builtin-group
          group_name: "data_analysis"
        - tool_type: python
          component_module: "sam_mongodb.search_query"
          function_name: "mongo_query"
          tool_config:
            collection: "${__COMPONENT_UPPER_SNAKE_CASE_NAME___MONGO_COLLECTION}"

      session_service: *default_session_service
      artifact_service: *default_artifact_service

      artifact_handling_mode: "embed"
      enable_embed_resolution: true
      enable_artifact_content_instruction: true

      agent_card:
        description: "A MongoDB agent that can answer questions by querying a configured database."
        defaultInputModes: ["text"]
        defaultOutputModes: ["text", "file"]
        skills:
          - id: "mongo_query"
            name: "mongo_query"
            description: "Answers questions by querying the connected MongoDB database."

      agent_card_publishing:
        interval_seconds: 30

      agent_discovery:
        enabled: false

      inter_agent_communication:
        allow_list: []
        request_timeout_seconds: 30
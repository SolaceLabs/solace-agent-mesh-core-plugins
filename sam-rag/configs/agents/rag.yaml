# This is the configuration file for the rag agent
#
# It fulfills a few functions:
# 1. A flow to do periodic registration of this agent with the orchestrator
# 2. A flow to process action requests and produce action responses

---
log:
  stdout_log_level: INFO
  log_file_level: INFO
  log_file: solace_ai_connector.log

shared_config:
  - broker_config: &broker_connection
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}
      temporary_queue: ${USE_TEMPORARY_QUEUES, false}

flows:
  # Flow to handle action requests
  - name: rag_action_request_processor
    components:
      # Input from a Solace broker
      - component_name: broker_input
        component_module: broker_input
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}agent_rag_action_request
          broker_subscriptions:
            # Subscribe to all rag actions - note that if we
            # wanted to handle some rag actions elsewhere, we would
            # need to be more specific here
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/actionRequest/*/*/rag/>
              qos: 1

      # Custom component to process the action request
      - component_name: action_request_processor
        component_base_path: .
        # path is completed at build time
        component_module: {{MODULE_DIRECTORY}}.agents.rag.rag_agent_component
        component_config:
          llm_service_topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/llm-service/request/general-good/
          embedding_service_topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/embedding-service/request/text/
          agent_name: rag
          # Scanner configuration
          scanner:
            batch: true
            use_memory_storage: true
            source:
              type: filesystem
              directories:
                - "/Users/alirezaparvizimosaed/Desktop/test/sample"
              filters:
                file_formats:
                  - ".txt"
                  - ".pdf"
                  - ".docx"
                  - ".md"
                  - ".html"
                  - ".csv"
                  - ".json"
                max_file_size: 10240  # in KB (10MB)
            database:
              type: postgresql
              dbname: rag_metadata
              host: localhost
              port: 5432
              user: admin
              password: admin
            schedule:
              interval: 60 # seconds
          
          # Preprocessor configuration
          preprocessor:
            default_preprocessor:
              type: enhanced
              params:
                remove_stopwords: false
                remove_punctuation: false
                lowercase: true
                strip_html: true
                strip_xml: true
                fix_unicode: true
                normalize_whitespace: true
                remove_urls: false
                remove_emails: false
                language: "en"
            
            preprocessors:
              # Text file configurations
              text:
                type: text
                params:
                  remove_stopwords: false
                  remove_punctuation: false
                  lowercase: true
                  normalize_whitespace: true
              
              # Document file configurations
              pdf:
                type: document
                params:
                  extract_images: false
                  extract_tables: true
                  ocr_enabled: false
                  language: "en"
              
              docx:
                type: document
                params:
                  extract_headers: true
                  extract_footers: true
                  extract_comments: false
                  extract_images: false
              
              # Structured data configurations
              json:
                type: structured
                params:
                  flatten_nested: false
                  extract_keys: []
                  ignore_keys: []
              
              html:
                type: html
                params:
                  extract_text_only: true
                  preserve_structure: true
                  extract_metadata: true
                  tags_to_extract: ["p", "h1", "h2", "h3", "h4", "h5", "h6", "li", "span", "div"]
              
              markdown:
                type: markdown
                params:
                  strip_html: true
                  preserve_links: true
                  preserve_images: false
              
              csv:
                type: csv
                params:
                  header_handling: "use_first_row"
                  delimiter: ","
                  quote_char: "\""
          
          # Text splitter configuration
          splitter:
            default_splitter:
              type: character
              params:
                chunk_size: 100
                chunk_overlap: 10
                separator: " "
            splitters:
              # Text file configurations
              text:
                type: character
                params:
                  chunk_size: 100 # minimum chunk size
                  chunk_overlap: 10
                  separator: " "
              txt:
                type: character
                params:
                  chunk_size: 100
                  chunk_overlap: 10
                  separator: " "
              # Structured data configurations
              json:
                type: recursive_json
                params:
                  chunk_size: 100
                  chunk_overlap: 10
              html:
                type: html
                params:
                  chunk_size: 100
                  chunk_overlap: 10
                  tags_to_extract: ["p", "h1", "h2", "h3", "li"]
              markdown:
                type: markdown
                params:
                  chunk_size: 100
                  chunk_overlap: 10
                  strip_headers: false
              csv:
                type: csv
                params:
                  chunk_size: 100 # chunk size in number of rows
          # Embedding configuration
          embedding:
            # default: "openai"
            embedder_type: "openai"
            embedder_params:
              # OpenAI embeddings
              model: "bedrock-cohere-embed-english-v3" #${OPENAI_EMBEDDING_MODEL, "text-embedding-3-small"}
              api_key: sk-AuOItNUssenat1iIcA2qlQ #${OPENAI_API_KEY}
              base_url: https://lite-llm.mymaas.net #${OPENAI_API_ENDPOINT}
              batch_size: 1
            normalize_embeddings: True

            # # Hugging Face embeddings
            # embedder_type: "huggingface"
            # embedder_params:
            #     model: ${HF_EMBEDDING_MODEL, "sentence-transformers/all-MiniLM-L6-v2"}
            #     dimensions: 1536
            #     device: ${HF_DEVICE, "cpu"}
            #     batch_size: 32

            #   # Cohere embeddings
            #   embedder_type: "cohere"
            #   embedder_params:
            #     model: ${COHERE_EMBEDDING_MODEL, "embed-english-v3.0"}
            #     dimensions: 1024
            #     api_key: ${COHERE_API_KEY}
            #     batch_size: 96

            #   # Local embeddings
            #   embedder_type: "local"
            #   embedder_params:
            #     model: ${LOCAL_EMBEDDING_MODEL, "sentence-transformers/all-MiniLM-L6-v2"}
            #     dimensions: 1536
            #     device: ${LOCAL_DEVICE, "cpu"}
            #     batch_size: 32
          
          # Vector database configuration
          vector_db:
            # Qdrant
            db_type: "qdrant"
            db_params:
              url: "https://a57f2ac6-9d41-4a31-ab55-1194fc952bff.europe-west3-0.gcp.cloud.qdrant.io" #${QDRANT_URL}
              api_key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3MiOiJtIn0.n2k3wVZneKUv6Q2hX3v7DXeKdPYW8rWxLgfYuzNFlJQ #${QDRANT_API_KEY}
              collection_name: "sample" #${QDRANT_COLLECTION}
              embedding_dimension: 1024 #${QDRANT_EMBEDDING_DIMENSION, 1536}
              # distance: ${QDRANT_DISTANCE, "Cosine"}

            # # Chroma DB configuration
            # chroma:
            #   host: ${CHROMA_HOST, "localhost"}
            #   port: ${CHROMA_PORT, 8000}
            #   collection_name: ${CHROMA_COLLECTION, "documents"}
            #   persist_directory: ${CHROMA_PERSIST_DIR, "./chroma_db"}
            #   embedding_function: ${CHROMA_EMBEDDING_FUNCTION, "default"}
            # # Pinecone configuration

            # pinecone:
            #   api_key: ${PINECONE_API_KEY}
            #   environment: ${PINECONE_ENVIRONMENT}
            #   index_name: ${PINECONE_INDEX}
            #   namespace: ${PINECONE_NAMESPACE, "default"}
            #   dimensions: ${PINECONE_DIMENSIONS, 1536}
            #   metric: ${PINECONE_METRIC, "cosine"}
            # # Weaviate configuration

            # weaviate:
            #   url: ${WEAVIATE_URL}
            #   api_key: ${WEAVIATE_API_KEY}
            #   class_name: ${WEAVIATE_CLASS, "Document"}
            #   batch_size: ${WEAVIATE_BATCH_SIZE, 100}
            #   vector_field: ${WEAVIATE_VECTOR_FIELD, "vector"}
            # # Milvus configuration

            # milvus:
            #   host: ${MILVUS_HOST, "localhost"}
            #   port: ${MILVUS_PORT, 19530}
            #   collection_name: ${MILVUS_COLLECTION, "documents"}
            #   dimension: ${MILVUS_DIMENSION, 1536}
            #   index_type: ${MILVUS_INDEX_TYPE, "IVF_FLAT"}
            #   metric_type: ${MILVUS_METRIC_TYPE, "IP"}
            # # FAISS configuration

            # faiss:
            #   index_file: ${FAISS_INDEX_FILE, "./faiss_index"}
            #   dimension: ${FAISS_DIMENSION, 1536}
            #   index_type: ${FAISS_INDEX_TYPE, "IndexFlatIP"}
            #   metric_type: ${FAISS_METRIC_TYPE, "ip"}
            # # PostgreSQL with pgvector

            # pgvector:
            #   host: ${PGVECTOR_HOST, "localhost"}
            #   port: ${PGVECTOR_PORT, 5432}
            #   database: ${PGVECTOR_DATABASE, "vectordb"}
            #   user: ${PGVECTOR_USER, "postgres"}
            #   password: ${PGVECTOR_PASSWORD}
            #   table_name: ${PGVECTOR_TABLE, "document_embeddings"}
            #   vector_column: ${PGVECTOR_VECTOR_COLUMN, "embedding"}
            #   dimension: ${PGVECTOR_DIMENSION, 1536}
            #   index_type: ${PGVECTOR_INDEX_TYPE, "ivfflat"}

            # # SQLite with sqlite-vss
            # sqlite_vss:
            #   db_path: ${SQLITE_VSS_PATH, "./sqlite_vss.db"}
            #   table_name: ${SQLITE_VSS_TABLE, "document_embeddings"}
            #   dimension: ${SQLITE_VSS_DIMENSION, 1536}
        
        broker_request_response:
          enabled: true
          broker_config: *broker_connection
          request_expiry_ms: 120000
          payload_encoding: utf-8
          payload_format: json
          response_topic_prefix: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1
          response_queue_prefix: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1
        component_input:
          source_expression: input.payload

      # Output to a Solace broker
      - component_name: broker_output
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true

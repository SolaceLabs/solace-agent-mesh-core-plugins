import httpx
import uuid
from typing import Any, Dict, Optional

from google.adk.tools import ToolContext
from solace_ai_connector.common.log import log
from solace_agent_mesh.agent.utils.artifact_helpers import (
    save_artifact_with_metadata,
    ensure_correct_extension,
    DEFAULT_SCHEMA_MAX_KEYS,
)
from solace_agent_mesh.agent.utils.context_helpers import get_original_session_id
from datetime import datetime, timezone


async def draw(
    mermaid_code: str,
    output_filename: Optional[str] = None,
    tool_context: Optional[ToolContext] = None,
    tool_config: Optional[Dict[str, Any]] = None,
) -> Dict[str, Any]:
    """
    Generates a PNG image from Mermaid diagram syntax and saves it as an artifact.

    Args:
        mermaid_code (str): The Mermaid diagram code to render.
        output_filename (Optional[str]): The desired filename for the output image. If not provided,
            a unique filename will be generated.
    """
    log_identifier = "[MermaidTool:draw]"
    if not tool_context or not tool_context._invocation_context:
        return {"status": "error", "message": "ToolContext is missing."}

    inv_context = tool_context._invocation_context
    app_name = getattr(inv_context, "app_name", "sam-mermaid")
    user_id = getattr(inv_context, "user_id", "user")
    session_id = get_original_session_id(inv_context)
    artifact_service = getattr(inv_context, "artifact_service", None)

    if not artifact_service:
        return {"status": "error", "message": "ArtifactService is not available."}

    current_tool_config = tool_config or {}
    mermaid_server_url = current_tool_config.get("mermaid_server_url")

    if not mermaid_server_url:
        return {
            "status": "error",
            "message": "Mermaid server URL is not configured in tool_config.",
        }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{mermaid_server_url.rstrip('/')}/generate?type=png",
                data=mermaid_code,
                timeout=30.0,
            )
            response.raise_for_status()

        image_bytes = response.content

        if output_filename:
            final_output_filename = ensure_correct_extension(output_filename, "png")
        else:
            final_output_filename = f"mermaid_diagram_{uuid.uuid4()}.png"

        save_result = await save_artifact_with_metadata(
            artifact_service=artifact_service,
            app_name=app_name,
            user_id=user_id,
            session_id=session_id,
            filename=final_output_filename,
            content_bytes=image_bytes,
            mime_type="image/png",
            metadata_dict={
                "description": "Mermaid diagram generated by the draw tool.",
                "source_tool": "sam_mermaid.draw",
            },
            timestamp=datetime.now(timezone.utc),
            schema_max_keys=DEFAULT_SCHEMA_MAX_KEYS,
            tool_context=tool_context,
        )

        if save_result.get("status") == "error":
            return save_result

        return {
            "status": "success",
            "message": f"Diagram saved as {final_output_filename}",
            "output_filename": final_output_filename,
            "output_version": save_result["data_version"],
        }

    except httpx.HTTPStatusError as e:
        log.error(f"{log_identifier} HTTP error: {e.response.text}")
        return {"status": "error", "message": f"HTTP error: {e.response.text}"}
    except Exception as e:
        log.exception(f"{log_identifier} Error: {e}")
        return {"status": "error", "message": str(e)}

## Quick Summary
The `sam_mermaid` directory contains a tool for generating PNG images from Mermaid diagram syntax. It communicates with a specified Mermaid rendering server, generates the image, and saves it as a versioned artifact within the Solace Agent Mesh ecosystem.

## Files Overview
- `__init__.py`: Exposes the main `draw` function, making it directly importable from the `sam_mermaid` package.
- `draw.py`: Contains the core implementation for rendering Mermaid code into an image artifact.

## Developer API Reference

### __init__.py
**Purpose:** This file makes the primary `draw` function available at the top level of the `sam_mermaid` package for convenient importing.

---

### draw.py
**Purpose:** This module provides the functionality to convert a string of Mermaid diagram code into a PNG image by calling an external rendering service and saving the result as a system artifact.

**Import:** `from sam_mermaid import draw`

**Functions:**
- `async draw(mermaid_code: str, output_filename: Optional[str] = None, tool_context: Optional[ToolContext] = None, tool_config: Optional[Dict[str, Any]] = None) -> Dict[str, Any]` - Generates a PNG image from Mermaid diagram syntax and saves it as an artifact.
  - **Parameters:**
    - `mermaid_code (str)`: The Mermaid diagram code to render.
    - `output_filename (Optional[str])`: The desired filename for the output image (e.g., "my_diagram.png"). If not provided, a unique filename will be generated. The `.png` extension will be added if missing.
    - `tool_context (Optional[ToolContext])`: Injected by the framework. Provides invocation context like user, session, and access to the artifact service. **Required for operation.**
    - `tool_config (Optional[Dict[str, Any]])`: Injected by the framework. Must contain the `mermaid_server_url` key pointing to the rendering service. **Required for operation.**
  - **Returns:**
    - `Dict[str, Any]`: A dictionary indicating the result. On success, it includes `status: 'success'`, `message`, `output_filename`, and `output_version`. On failure, it includes `status: 'error'` and a `message`.

**Usage Examples:**
```python
import asyncio
from typing import Dict, Any

# The 'draw' function is the primary public interface
from sam_mermaid import draw

# Mock context and config for standalone example.
# In a real environment, these are provided by the Solace Agent Mesh framework.
class MockArtifactService:
    async def save_artifact(self, **kwargs) -> Dict[str, Any]:
        print(f"--- MOCK: Saving artifact '{kwargs.get('filename')}' ---")
        return {"status": "success", "data_version": "1"}

class MockInvocationContext:
    def __init__(self):
        self.app_name = "my_app"
        self.user_id = "dev_user"
        self.session_id = "session_123"
        self.original_session_id = "session_123"
        self.artifact_service = MockArtifactService()

class MockToolContext:
    def __init__(self):
        self._invocation_context = MockInvocationContext()

# --- Example Usage ---

async def generate_diagram():
    """
    Example of how to call the draw function to generate a diagram.
    """
    # 1. Define the Mermaid diagram code
    flowchart_code = """
    graph TD
        A[Start] --> B{Is it?};
        B -- Yes --> C[OK];
        C --> D[End];
        B -- No --> E[Find out];
        E --> B;
    """

    # 2. Prepare the context and configuration (provided by the framework)
    mock_context = MockToolContext()
    # The tool_config requires the URL of a running Mermaid renderer.
    # Example: https://github.com/mermaid-js/mermaid-live-editor
    mock_config = {
        "mermaid_server_url": "http://localhost:8080" # Replace with your actual server
    }

    print("Generating diagram...")
    
    # In a real application, you would need a running httpx-compatible server
    # at the specified URL. For this example, we'll assume it fails gracefully.
    # To run this successfully, you need a local mermaid server.
    try:
        result = await draw(
            mermaid_code=flowchart_code,
            output_filename="process_flow.png",
            tool_context=mock_context,
            tool_config=mock_config
        )
        print("\nResult:")
        print(result)
    except Exception as e:
        print(f"\nCould not connect to a Mermaid server for the example: {e}")
        print("A successful result would look like this:")
        print({
            'status': 'success', 
            'message': 'Diagram saved as process_flow.png', 
            'output_filename': 'process_flow.png', 
            'output_version': '1'
        })


if __name__ == "__main__":
    asyncio.run(generate_diagram())

```